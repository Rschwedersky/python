name: 'Build and Deploy Development'

on:
  push:
    branches: [ development ]
  workflow_dispatch:

env: 
  GITLAB_USERNAME: ${{ secrets.AWS_ACCESS_KEY_ID }}
  GITLAB_PASSWORD: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
jobs:
  # static-test:
  #   name: Static Test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         fetch-depth: 0
  #     - uses: sonarsource/sonarqube-scan-action@master
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # If you wish to fail your job when the Quality Gate is red, uncomment the
      # following lines. This would typically be used to fail a deployment.
      # - uses: sonarsource/sonarqube-quality-gate-action@master
      #   timeout-minutes: 5
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Build all images without cache
        run: docker-compose -f docker-compose-development-build.yml build --no-cache

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push builded images
        run: docker-compose -f docker-compose-development-build.yml push 

      - name: Copy docker-compose-development via ssh
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_DEVELOPMENT_HOST }}
          username: ${{ secrets.EC2_DEVELOPMENT_SSH_USERNAME }}
          key: ${{ secrets.EC2_DEVELOPMENT_SSH_KEY }}
          source: "docker-compose-development.yml"
          target: "hub"
      
      - name: Login to registry
        uses: garygrossgarten/github-action-ssh@release
        with:
          #command: echo $GITLAB_PASSWORD | sudo docker login registry.gitlab.com/hub-smarthis -u $GITLAB_USERNAME --password-stdin
          command: aws ecr get-login-password --region us-east-1 | sudo docker login --username AWS --password-stdin 526932095279.dkr.ecr.us-east-1.amazonaws.com
          host: ${{ secrets.EC2_DEVELOPMENT_HOST }}
          username: ${{ secrets.EC2_DEVELOPMENT_SSH_USERNAME }}
          privateKey: ${{ secrets.EC2_DEVELOPMENT_SSH_KEY}}     

      - name: Pull docker image
        uses: garygrossgarten/github-action-ssh@release
        with:
          command: sudo docker-compose -f ./hub/docker-compose-development.yml pull
          host: ${{ secrets.EC2_DEVELOPMENT_HOST }}
          username: ${{ secrets.EC2_DEVELOPMENT_SSH_USERNAME }}
          privateKey: ${{ secrets.EC2_DEVELOPMENT_SSH_KEY}}

      - name: Wait to completely pull images
        uses: jakejarvis/wait-action@master
        with:
          time: '60s'

      - name: Removes old docker stack
        uses: garygrossgarten/github-action-ssh@release
        with:
          command: sudo docker stack rm manager
          host: ${{ secrets.EC2_DEVELOPMENT_HOST }}
          username: ${{ secrets.EC2_DEVELOPMENT_SSH_USERNAME }}
          privateKey: ${{ secrets.EC2_DEVELOPMENT_SSH_KEY}}

      - name: Wait to completely removes old stack
        uses: jakejarvis/wait-action@master
        with:
          time: '60s'

      - name: Deploy docker stack
        uses: garygrossgarten/github-action-ssh@release
        with:
          command: sudo docker stack deploy manager -c ./hub/docker-compose-development.yml --with-registry-auth
          host: ${{ secrets.EC2_DEVELOPMENT_HOST }}
          username: ${{ secrets.EC2_DEVELOPMENT_SSH_USERNAME }}
          privateKey: ${{ secrets.EC2_DEVELOPMENT_SSH_KEY}}

      - name: Wait to deployment completes
        uses: jakejarvis/wait-action@master
        with:
          time: '60s'

      - name: Deploy docker stack
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_DEVELOPMENT_HOST }}
          username: ${{ secrets.EC2_DEVELOPMENT_SSH_USERNAME }}
          key: ${{ secrets.EC2_DEVELOPMENT_SSH_KEY}}
          port: ${{ secrets.EC2_SSH_PORT }}
          script: |
            #!/bin/bash
            sudo docker exec $(sudo docker ps -q -f name=manager_app) python manage.py migrate
            sudo docker exec $(sudo docker ps -q -f name=manager_app) python manage.py collectstatic --noinput --clear

      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been deployed.'
      
