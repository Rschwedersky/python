import os
import sys
import _locale
from portal.functions import get_database_info_by_url, get_django_channel_layer_backend
from distutils.util import strtobool
_locale._getdefaultlocale = (lambda *args: ['en_US', 'utf8'])

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Celery settings

CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL')

ORCHESTRATOR_BROKER_URL = os.environ.get('ORCHESTRATOR_BROKER_URL')
ORCHESTRATOR_API_TEST_URL = os.environ.get('ORCHESTRATOR_API_TEST_URL')
ORCHESTRATOR_API_TEST_USERNAME = os.environ.get(
    'ORCHESTRATOR_API_TEST_USERNAME')
ORCHESTRATOR_API_TEST_PASSWORD = os.environ.get(
    'ORCHESTRATOR_API_TEST_PASSWORD')
ORCHESTRATOR_API_URL = os.environ.get('ORCHESTRATOR_API_URL')
ORCHESTRATOR_API_USERNAME = os.environ.get('ORCHESTRATOR_API_USERNAME')
ORCHESTRATOR_API_PASSWORD = os.environ.get('ORCHESTRATOR_API_PASSWORD')

#: Only add pickle to this list if your broker is secured
#: from unwanted access (see userguide/security.html)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'


"""
Django settings for portal project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(strtobool(os.environ.get('DEBUG')))

ALLOWED_HOSTS = ['hub.smarthis.com.br', 'captcha-api.hub.smarthis.com.br', 'localhost',
                 'hub.dev.smarthis.com.br', 'captcha-api.pro.smarthis.com.br', 'localhost', 'testing-hub.smarthis.com.br', '.smarthis.com.br', 'local-hub']


# Application definition

INSTALLED_APPS = [
    'dashboard',
    'subscriptions',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'uipath_logs',
    'rest_framework',
    'rest_framework.authtoken',
    'django_celery_beat',
    'my_solutions',
    'storages',
    'smt_orchestrator',
    'django.contrib.humanize',
    'portal',
    'channels',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'portal.request_login.AuthRequiredMiddleware',
    'portal.middleware.StatsMiddleware'
]


ROOT_URLCONF = 'portal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'subscriptions.context_processor.onboarding_processor',

            ],
        },
    },
]

WSGI_APPLICATION = 'portal.wsgi.application'
ASGI_APPLICATION = 'portal.asgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': get_database_info_by_url(os.environ.get('DATABASE_URL'))
}

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'portal.password_validators.NumberValidator',
    },
    {
        'NAME': 'portal.password_validators.UppercaseValidator',
    },
    {
        'NAME': 'portal.password_validators.LowercaseValidator',
    },
    {
        'NAME': 'portal.password_validators.SymbolValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')


# Using only BCRYP for password hash
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

# Custom user model
AUTH_USER_MODEL = 'subscriptions.User'
CUSTOMER_MODEL = 'subscriptions.Client'

# Authentication redirections
LOGIN_REDIRECT_URL = 'onboarding'
LOGOUT_REDIRECT_URL = 'login'

# Email stuff
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL')
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_PORT = os.environ.get('EMAIL_PORT')
EMAIL_USE_TLS = True  # enforce TLS use

# UiPathLogs
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication'],
    'DEFAULT_PERMISSION_CLASSES': [],
    'TEST_REQUEST_DEFAULT_FORMAT': 'json'
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',
        'LOCATION': os.environ.get('MENCACHED_LOCATION'),
        'KEY_PREFIX': 'djcache',
    }
}

AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')

# APP_URL_TRIBUNAL_DE_JUSTICA_RJ = os.environ.get('APP_URL_TRIBUNAL_DE_JUSTICA_RJ')

AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')

AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

VAULT_TOKEN = os.environ.get('VAULT_TOKEN')

IS_LOCALHOST = bool(strtobool(os.environ.get('IS_LOCALHOST')))
IS_DEV = bool(strtobool(os.environ.get('IS_DEV')))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': os.environ.get('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    },
}

# GEOIP_PATH = '/geoip'

PAGARME_API_KEY = os.environ.get('PAGARME_API_KEY')
PAGARME_SECRET_KEY = os.environ.get('PAGARME_SECRET_KEY')
PAGARME_TEST_API_KEY = os.environ.get('PAGARME_TEST_API_KEY')
PAGARME_TEST_SECRET_KEY = os.environ.get('PAGARME_TEST_SECRET_KEY')
PAGARME_API_VERSION = os.environ.get('PAGARME_API_VERSION')

'''This tests whether the second commandline argument (after manage.py) was test. Then you can access this variable from other modules'''
'''If you use other libraries beside that default django testing one, this can be a problem'''

TESTING = len(sys.argv) > 1 and sys.argv[1] == 'test'

ASGI_APPLICATION = "portal.asgi.application"

CHANNEL_LAYERS = get_django_channel_layer_backend()
